// https://leetcode.com/problems/minimize-malware-spread/

// Given, Return the node that, if removed, would minimize M(initial)
// Mtlb max population walo ko bachaoge toh he M(initial) ko minimize kar paaoge
// Kuki sirf ek he node ko remove kar saktey hai from initial,
// so agar kisi CC me ek se zyada log infected hai, toh kisi ko nai bacahaya ja sakta
// So acc. to question return the smallest node, that's why sorting is done.

class Solution {
    
    public int[] par;
    public int[] size;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        par = new int[n];
        size = new int[n]; // Use size[] only, it will store population of CC 

        // Initialization
        for (int i = 0; i < n; i++) {
            par[i] = i;
            size[i] = 1;
        }

        // Union Find
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 0 || i == j) continue; // Skip no connection && self loop

                int p1 = findPar(i);
                int p2 = findPar(j);
                if (p1 != p2) {
                    mergeOrUnionBySize(p1, p2);
                }
            }
        }

        // Konse country me kitne log infected hai
        int[] infectedCount = new int[n];
        for (int ele : initial) {
            int p = findPar(ele);  // Sab cheez leader he manage karta hai
            infectedCount[p]++; // initial wala ele konsi country/leader ko belong krta tha us leader ka infectedCount badha do 
        }

        // Jab sab me 1 se zyada log infected honge, toh minimum initial node return karna hai
        Arrays.sort(initial);
        
        int ans = initial[0]; // Already setting minimum initial node
        int maxPopulation = 0; // Jis leader ka CC max hoga, us country ko bachaenge => us initial ele ko remove/cure karenge
        for (int ele : initial) {
            int p = findPar(ele); // Intitial ele kis country ko belong karti hai
            if (infectedCount[p] == 1 && size[p] > maxPopulation) { // Sirf 1 node infected hai and max size hai CC ki
                maxPopulation = size[p]; // Toh tumhari country bachaungi mai
                ans = ele; // Keep track of the node to be removed
            }
        }
        return ans;
    }
    
    public int findPar(int x) {
        if(par[x] == x) return x;
        return par[x] = findPar(par[x]);
    }
    
    
	public void mergeOrUnionBySize(int gpu, int gpv) {
		if (size[gpu] > size[gpv]) { 	
			par[gpv] = gpu;
			size[gpu] += size[gpv];
		} 
		else { 					
			par[gpu] = gpv; 
			size[gpv] += size[gpu];
		}
	}
    
}
